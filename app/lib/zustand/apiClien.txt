import { create } from "zustand";
import { createJSONStorage, persist } from "zustand/middleware";





export type IApiMethods = "GET" | "POST" | "DELETE" | "PUT" | "PATCH"
export type IQueryParams = { key: string; value: string }
export type ISlice = {
  bearerToken: string
  basePath: string
  apiMethod: IApiMethods
  headers: IQueryParams[]
  queryParams: IQueryParams[]
  // updateQueryParams: (params: IQueryParams) => void
  // updateApiMethod: (method: IApiMethods) => void
  // updateBasePath: (newPath: string) => void
  update: (data: {
    basePath?: string
    bearerToken?: string
    apiMethod?: IApiMethods
    headers?: IQueryParams[]
    queryParams?: IQueryParams[]
  }) => void
}

export const useApiClientStore = create(
  persist<ISlice>(
    (set) => ({
      bearerToken: "",
      basePath: "",
      apiMethod: "GET",
      headers: [],
      queryParams: [],
      // updateQueryParams: (params) =>
      //   set((state) => {
      //     const newArr = state.queryParams
      //     newArr.push(params)
      //     return { queryParams: newArr }
      //   }),
      // updateApiMethod: (method) => set((state) => ({ apiMethod: method })),
      // updateBasePath: (newPath) => set((state) => ({ basePath: newPath })),
      update: (data) =>
        set((state) => {
          return { ...state, ...data }
        }),
    }),
    {
      name: "settings",
      storage: createJSONStorage(() => localStorage),
    }
  )
)